<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/main.py" />
              <option name="originalContent" value="from fastapi import FastAPI&#10;from fastapi import Request&#10;from app import database, schemas, logic, cache, workers&#10;from app.logging_config import setup_logging&#10;&#10;&#10;app = FastAPI() # Creates instance of FastAPI web server -&gt; will be used by uvicorn&#10;&#10;database.init_db()    # Initializes the database connection&#10;cache.init_cache()     # Initializes the cache store&#10;&#10;&#10;@app.on_event(&quot;startup&quot;)&#10;async def startup_event():&#10;    await workers.init_worker()&#10;&#10;&#10;@app.post(&quot;/pow&quot;)&#10;async def pow_api(req: schemas.PowerRequest):&#10;    result = logic.power(req.base, req.exponent)&#10;    await database.save_to_db(&quot;pow&quot;, req.model_dump(), result)&#10;    return {&quot;result&quot;: result}&#10;&#10;&#10;@app.post(&quot;/factorial&quot;)&#10;async def fact_api(req: schemas.SingleInput):&#10;    result = logic.factorial(req.number)&#10;    await database.save_to_db(&quot;factorial&quot;, req.model_dump(), result)&#10;    return {&quot;result&quot;: result}&#10;&#10;&#10;@app.post(&quot;/fib&quot;)&#10;async def fib_api(req: schemas.SingleInput):&#10;    cached = cache.check_cache(&quot;fib&quot;, req.number)&#10;    if cached:&#10;        return {&quot;result&quot;: cached}&#10;&#10;    result = await workers.fib_worker(req.number)&#10;    cache.set_cache(&quot;fib&quot;, req.number, result)&#10;    await database.save_to_db(&quot;fib&quot;, req.model_dump(), result)&#10;    return {&quot;result&quot;: result}&#10;&#10;&#10;setup_logging()&#10;&#10;&#10;@app.middleware(&quot;http&quot;)&#10;async def log_requests(request: Request, call_next):&#10;    print(f&quot;Incoming request: {request.method} {request.url.path}&quot;)&#10;    response = await call_next(request)&#10;    print(f&quot;Response status: {response.status_code}&quot;)&#10;    return response&#10;" />
              <option name="updatedContent" value="from fastapi import FastAPI&#10;from fastapi import Request&#10;from app import database, schemas, logic, cache, workers&#10;from app.logging_config import setup_logging&#10;&#10;&#10;app = FastAPI() # Creates instance of FastAPI web server -&gt; will be used by uvicorn&#10;&#10;database.init_db()    # Initializes the database connection&#10;cache.init_cache()     # Initializes the cache store&#10;&#10;&#10;@app.on_event(&quot;startup&quot;)&#10;async def startup_event():&#10;    await workers.init_worker()&#10;&#10;&#10;@app.post(&quot;/pow&quot;)&#10;async def pow_api(req: schemas.PowerRequest):&#10;    cached = cache.check_cache(&quot;pow&quot;, (req.base, req.exponent))&#10;    if cached:&#10;        return {&quot;result&quot;: cached}&#10;    result = logic.power(req.base, req.exponent)&#10;    await database.save_to_db(&quot;pow&quot;, req.model_dump(), result)&#10;    cache.save_cache(&quot;pow&quot;, (req.base, req.exponent), result)&#10;    return {&quot;result&quot;: result}&#10;&#10;&#10;@app.post(&quot;/factorial&quot;)&#10;async def fact_api(req: schemas.SingleInput):&#10;    cached = cache.check_cache(&quot;factorial&quot;, req.number)&#10;    if cached:&#10;        return {&quot;result&quot;: cached}&#10;    result = logic.factorial(req.number)&#10;    await database.save_to_db(&quot;factorial&quot;, req.model_dump(), result)&#10;    cache.save_cache(&quot;factorial&quot;, req.number, result)&#10;    return {&quot;result&quot;: result}&#10;&#10;&#10;@app.post(&quot;/fib&quot;)&#10;async def fib_api(req: schemas.SingleInput):&#10;    cached = cache.check_cache(&quot;fib&quot;, req.number)&#10;    if cached:&#10;        return {&quot;result&quot;: cached}&#10;&#10;    result = await workers.fib_worker(req.number)&#10;    cache.set_cache(&quot;fib&quot;, req.number, result)&#10;    await database.save_to_db(&quot;fib&quot;, req.model_dump(), result)&#10;    return {&quot;result&quot;: result}&#10;&#10;&#10;setup_logging()&#10;&#10;&#10;@app.middleware(&quot;http&quot;)&#10;async def log_requests(request: Request, call_next):&#10;    print(f&quot;Incoming request: {request.method} {request.url.path}&quot;)&#10;    response = await call_next(request)&#10;    print(f&quot;Response status: {response.status_code}&quot;)&#10;    return response" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>