<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/main.py" />
              <option name="originalContent" value="from fastapi import FastAPI&#10;from fastapi import Request&#10;from app import database, schemas, logic, cache, workers&#10;from app.logging_config import setup_logging&#10;from pydantic import BaseModel, Field&#10;import asyncio&#10;&#10;app = FastAPI()&#10;&#10;database.init_db()&#10;cache.init_cache()&#10;&#10;@app.on_event(&quot;startup&quot;)&#10;async def startup_event():&#10;    await workers.init_worker()&#10;&#10;&#10;@app.post(&quot;/pow&quot;)&#10;async def pow_api(req: schemas.PowerRequest):&#10;    result = logic.power(req.base, req.exponent)&#10;    await database.save_to_db(&quot;pow&quot;, req.model_dump(), result)&#10;    return {&quot;result&quot;: result}&#10;&#10;&#10;@app.post(&quot;/factorial&quot;)&#10;async def fact_api(req: schemas.SingleInput):&#10;    result = logic.factorial(req.number)&#10;    await database.save_to_db(&quot;factorial&quot;, req.model_dump(), result)&#10;    return {&quot;result&quot;: result}&#10;&#10;&#10;@app.post(&quot;/fib&quot;)&#10;async def fib_api(req: schemas.SingleInput):&#10;    cached = cache.check_cache(&quot;fib&quot;, req.number)&#10;    if cached:&#10;        return {&quot;result&quot;: cached}&#10;&#10;    result = await workers.fib_worker(req.number)&#10;    cache.set_cache(&quot;fib&quot;, req.number, result)&#10;    await database.save_to_db(&quot;fib&quot;, req.model_dump(), result)&#10;    return {&quot;result&quot;: result}&#10;&#10;&#10;setup_logging()&#10;&#10;&#10;@app.middleware(&quot;http&quot;)&#10;async def log_requests(request: Request, call_next):&#10;    print(f&quot;Incoming request: {request.method} {request.url.path}&quot;)&#10;    response = await call_next(request)&#10;    print(f&quot;Response status: {response.status_code}&quot;)&#10;    return response&#10;" />
              <option name="updatedContent" value="from fastapi import FastAPI&#10;from fastapi import Request&#10;from app import database, schemas, logic, cache, workers&#10;from app.logging_config import setup_logging&#10;from pydantic import BaseModel, Field&#10;import asyncio&#10;&#10;app = FastAPI()&#10;&#10;database.init_db()&#10;cache.init_cache()&#10;&#10;@app.on_event(&quot;startup&quot;)&#10;async def startup_event():&#10;    await workers.init_worker()&#10;&#10;&#10;@app.post(&quot;/pow&quot;)&#10;async def pow_api(req: schemas.PowerRequest):&#10;    result = logic.power(req.base, req.exponent)&#10;    await database.save_to_db(&quot;pow&quot;, req.model_dump(), result)&#10;    return {&quot;result&quot;: result}&#10;&#10;&#10;@app.post(&quot;/factorial&quot;)&#10;async def fact_api(req: schemas.SingleInput):&#10;    result = logic.factorial(req.number)&#10;    await database.save_to_db(&quot;factorial&quot;, req.model_dump(), result)&#10;    return {&quot;result&quot;: result}&#10;&#10;&#10;@app.post(&quot;/fib&quot;)&#10;async def fib_api(req: schemas.SingleInput):&#10;    cached = cache.check_cache(&quot;fib&quot;, req.number)&#10;    if cached:&#10;        return {&quot;result&quot;: cached}&#10;&#10;    result = await workers.fib_worker(req.number)&#10;    cache.set_cache(&quot;fib&quot;, req.number, result)&#10;    await database.save_to_db(&quot;fib&quot;, req.model_dump(), result)&#10;    return {&quot;result&quot;: result}&#10;&#10;&#10;setup_logging()&#10;&#10;&#10;@app.middleware(&quot;http&quot;)&#10;async def log_requests(request: Request, call_next):&#10;    print(f&quot;Incoming request: {request.method} {request.url.path}&quot;)&#10;    response = await call_next(request)&#10;    print(f&quot;Response status: {response.status_code}&quot;)&#10;    return response" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/workers.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/workers.py" />
              <option name="originalContent" value="import asyncio&#10;from app.logic import fibonacci&#10;&#10;queue = None&#10;&#10;&#10;async def init_worker():&#10;    global queue&#10;    if queue is None:&#10;        queue = asyncio.Queue()&#10;        asyncio.create_task(worker_loop())&#10;&#10;&#10;async def worker_loop():&#10;    while True:&#10;        n, future = await queue.get()&#10;        result = fibonacci(n)&#10;        future.set_result(result)&#10;&#10;&#10;async def fib_worker(n: int) -&gt; int:&#10;    if queue is None:&#10;        raise RuntimeError(&quot;Fibonacci worker queue is not initialized. Make sure init_worker() is called on startup.&quot;)&#10;    future = asyncio.get_event_loop().create_future()&#10;    await queue.put((n, future))&#10;    return await future&#10;" />
              <option name="updatedContent" value="import asyncio&#10;from app.logic import fibonacci&#10;&#10;queue = None&#10;worker_started = False&#10;&#10;&#10;async def init_worker():&#10;    global queue, worker_started&#10;    if queue is None:&#10;        queue = asyncio.Queue()&#10;    if not worker_started:&#10;        asyncio.create_task(worker_loop())&#10;        worker_started = True&#10;&#10;&#10;async def worker_loop():&#10;    while True:&#10;        n, future = await queue.get()&#10;        result = fibonacci(n)&#10;        future.set_result(result)&#10;&#10;&#10;async def fib_worker(n: int) -&gt; int:&#10;    global queue, worker_started&#10;    if queue is None or not worker_started:&#10;        await init_worker()&#10;    future = asyncio.get_event_loop().create_future()&#10;    await queue.put((n, future))&#10;    return await future" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tests/test_api.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tests/test_api.py" />
              <option name="originalContent" value="from fastapi.testclient import TestClient&#10;from app.main import app&#10;from app import workers&#10;&#10;&#10;def test_pow():&#10;    response = client.post(&quot;/pow&quot;, json={&quot;base&quot;: 2, &quot;exponent&quot;: 5})&#10;    assert response.status_code == 200&#10;    assert response.json() == {&quot;result&quot;: 32.0}&#10;&#10;&#10;def test_fib():&#10;    response = client.post(&quot;/fib&quot;, json={&quot;number&quot;: 10})&#10;    assert response.status_code == 200&#10;    assert response.json()[&quot;result&quot;] == 55  # 10th Fibonacci number&#10;    print(&quot;Got response:&quot;, response)&#10;&#10;&#10;def test_factorial():&#10;    response = client.post(&quot;/factorial&quot;, json={&quot;number&quot;: 5})&#10;    assert response.status_code == 200&#10;    assert response.json()[&quot;result&quot;] == 120&#10;&#10;&#10;def test_invalid_input_pow():&#10;    response = client.post(&quot;/pow&quot;, json={&quot;base&quot;: &quot;abc&quot;, &quot;exponent&quot;: 2})&#10;    assert response.status_code == 422  # Unprocessable Entity&#10;&#10;&#10;def test_invalid_input_fib():&#10;    response = client.post(&quot;/fib&quot;, json={&quot;number&quot;: -5})&#10;    assert response.status_code == 422&#10;" />
              <option name="updatedContent" value="from fastapi.testclient import TestClient&#10;from app.main import app&#10;from app import workers&#10;&#10;client = TestClient(app)&#10;&#10;&#10;def test_pow():&#10;    response = client.post(&quot;/pow&quot;, json={&quot;base&quot;: 2, &quot;exponent&quot;: 5})&#10;    assert response.status_code == 200&#10;    assert response.json() == {&quot;result&quot;: 32.0}&#10;&#10;&#10;def test_fib():&#10;    response = client.post(&quot;/fib&quot;, json={&quot;number&quot;: 10})&#10;    assert response.status_code == 200&#10;    assert response.json()[&quot;result&quot;] == 55  # 10th Fibonacci number&#10;    print(&quot;Got response:&quot;, response)&#10;&#10;&#10;def test_factorial():&#10;    response = client.post(&quot;/factorial&quot;, json={&quot;number&quot;: 5})&#10;    assert response.status_code == 200&#10;    assert response.json()[&quot;result&quot;] == 120&#10;&#10;&#10;def test_invalid_input_pow():&#10;    response = client.post(&quot;/pow&quot;, json={&quot;base&quot;: &quot;abc&quot;, &quot;exponent&quot;: 2})&#10;    assert response.status_code == 422  # Unprocessable Entity&#10;&#10;&#10;def test_invalid_input_fib():&#10;    response = client.post(&quot;/fib&quot;, json={&quot;number&quot;: -5})&#10;    assert response.status_code == 422" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>