<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/WebPage.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/WebPage.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Math API Client&lt;/title&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;!-- React and ReactDOM via CDN --&gt;&#10;    &lt;script src=&quot;https://unpkg.com/react@18/umd/react.development.js&quot; crossorigin&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://unpkg.com/react-dom@18/umd/react-dom.development.js&quot; crossorigin&gt;&lt;/script&gt;&#10;    &lt;!-- Babel for JSX support --&gt;&#10;    &lt;script src=&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;style&gt;&#10;        body {&#10;            font-family: Arial, sans-serif;&#10;            margin: 0;&#10;            min-height: 100vh;&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);&#10;        }&#10;        .container {&#10;            display: flex;&#10;            flex-direction: column;&#10;            align-items: center;&#10;            justify-content: center;&#10;            min-width: 350px;&#10;            max-width: 400px;&#10;            width: 100%;&#10;        }&#10;        .card {&#10;            background: #f9f9f9;&#10;            border-radius: 16px;&#10;            padding: 2em 2em 1.5em 2em;&#10;            margin-bottom: 2em;&#10;            box-shadow: 0 4px 24px #90caf9;&#10;            width: 100%;&#10;            display: flex;&#10;            flex-direction: column;&#10;            align-items: center;&#10;        }&#10;        input, button {&#10;            margin: 0.5em;&#10;            padding: 0.75em;&#10;            border-radius: 8px;&#10;            border: 1px solid #90caf9;&#10;            font-size: 1em;&#10;            width: 90%;&#10;            box-sizing: border-box;&#10;        }&#10;        button {&#10;            background: #1976d2;&#10;            color: white;&#10;            border: none;&#10;            cursor: pointer;&#10;            font-weight: bold;&#10;            transition: background 0.2s;&#10;        }&#10;        button:hover {&#10;            background: #1565c0;&#10;        }&#10;        .result {&#10;            margin-top: 0.5em;&#10;            font-weight: bold;&#10;            color: #1976d2;&#10;            font-size: 1.1em;&#10;        }&#10;        h1, h2 {&#10;            text-align: center;&#10;            color: #1976d2;&#10;        }&#10;        .tab-btns {&#10;            display: flex;&#10;            width: 100%;&#10;            margin-bottom: 1em;&#10;        }&#10;        .tab-btns button {&#10;            flex: 1;&#10;            border-radius: 8px 8px 0 0;&#10;            margin: 0;&#10;            border-bottom: 2px solid #1976d2;&#10;        }&#10;        .tab-btns button:not(:last-child) {&#10;            border-right: 1px solid #90caf9;&#10;        }&#10;        .tab-btns button.active {&#10;            background: #1976d2;&#10;            color: white;&#10;        }&#10;        .error {&#10;            color: #d32f2f;&#10;            margin-top: 0.5em;&#10;        }&#10;        .success {&#10;            color: #388e3c;&#10;            margin-top: 0.5em;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;text/babel&quot;&gt;&#10;        const apiUrl = &quot;http://127.0.0.1:8080&quot;;&#10;&#10;        function SignIn({ onLogin }) {&#10;            const [username, setUsername] = React.useState(&quot;&quot;);&#10;            const [password, setPassword] = React.useState(&quot;&quot;);&#10;            const [error, setError] = React.useState(&quot;&quot;);&#10;&#10;            const handleSubmit = async (e) =&gt; {&#10;                e.preventDefault();&#10;                setError(&quot;&quot;);&#10;                try {&#10;                    const res = await fetch(`${apiUrl}/login`, {&#10;                        method: &quot;POST&quot;,&#10;                        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;                        body: JSON.stringify({ username, password })&#10;                    });&#10;                    if (!res.ok) throw new Error(&quot;Invalid credentials&quot;);&#10;                    const data = await res.json();&#10;                    if (data.token) {&#10;                        onLogin(data.token);&#10;                    } else {&#10;                        setError(&quot;Login failed&quot;);&#10;                    }&#10;                } catch (err) {&#10;                    setError(err.message);&#10;                }&#10;            };&#10;&#10;            return (&#10;                &lt;div className=&quot;card&quot;&gt;&#10;                    &lt;h2&gt;Sign In&lt;/h2&gt;&#10;                    &lt;form onSubmit={handleSubmit}&gt;&#10;                        &lt;input type=&quot;text&quot; placeholder=&quot;Username&quot; value={username} onChange={e =&gt; setUsername(e.target.value)} required /&gt;&#10;                        &lt;input type=&quot;password&quot; placeholder=&quot;Password&quot; value={password} onChange={e =&gt; setPassword(e.target.value)} required /&gt;&#10;                        &lt;button type=&quot;submit&quot;&gt;Sign In&lt;/button&gt;&#10;                    &lt;/form&gt;&#10;                    {error &amp;&amp; &lt;div style={{color: 'red'}}&gt;{error}&lt;/div&gt;}&#10;                &lt;/div&gt;&#10;            );&#10;        }&#10;&#10;        function MathApp({ token }) {&#10;            const [powBase, setPowBase] = React.useState(&quot;&quot;);&#10;            const [powExponent, setPowExponent] = React.useState(&quot;&quot;);&#10;            const [powResult, setPowResult] = React.useState(&quot;&quot;);&#10;            const [factNumber, setFactNumber] = React.useState(&quot;&quot;);&#10;            const [factResult, setFactResult] = React.useState(&quot;&quot;);&#10;            const [fibNumber, setFibNumber] = React.useState(&quot;&quot;);&#10;            const [fibResult, setFibResult] = React.useState(&quot;&quot;);&#10;&#10;            const calculatePow = async () =&gt; {&#10;                setPowResult(&quot;Calculating...&quot;);&#10;                const res = await fetch(`${apiUrl}/pow`, {&#10;                    method: &quot;POST&quot;,&#10;                    headers: { &quot;Content-Type&quot;: &quot;application/json&quot;, ...(token ? { Authorization: `Bearer ${token}` } : {}) },&#10;                    body: JSON.stringify({ base: Number(powBase), exponent: Number(powExponent) })&#10;                });&#10;                const data = await res.json();&#10;                setPowResult(data.result);&#10;            };&#10;&#10;            const calculateFact = async () =&gt; {&#10;                setFactResult(&quot;Calculating...&quot;);&#10;                const res = await fetch(`${apiUrl}/factorial`, {&#10;                    method: &quot;POST&quot;,&#10;                    headers: { &quot;Content-Type&quot;: &quot;application/json&quot;, ...(token ? { Authorization: `Bearer ${token}` } : {}) },&#10;                    body: JSON.stringify({ number: Number(factNumber) })&#10;                });&#10;                const data = await res.json();&#10;                setFactResult(data.result);&#10;            };&#10;&#10;            const calculateFib = async () =&gt; {&#10;                setFibResult(&quot;Calculating...&quot;);&#10;                const res = await fetch(`${apiUrl}/fib`, {&#10;                    method: &quot;POST&quot;,&#10;                    headers: { &quot;Content-Type&quot;: &quot;application/json&quot;, ...(token ? { Authorization: `Bearer ${token}` } : {}) },&#10;                    body: JSON.stringify({ number: Number(fibNumber) })&#10;                });&#10;                const data = await res.json();&#10;                setFibResult(data.result);&#10;            };&#10;&#10;            return (&#10;                &lt;div className=&quot;container&quot;&gt;&#10;                    &lt;h1&gt;Math Operations&lt;/h1&gt;&#10;                    &lt;div className=&quot;card&quot;&gt;&#10;                        &lt;h2&gt;Power&lt;/h2&gt;&#10;                        &lt;input type=&quot;number&quot; placeholder=&quot;Base&quot; value={powBase} onChange={e =&gt; setPowBase(e.target.value)} /&gt;&#10;                        &lt;input type=&quot;number&quot; placeholder=&quot;Exponent&quot; value={powExponent} onChange={e =&gt; setPowExponent(e.target.value)} /&gt;&#10;                        &lt;button onClick={calculatePow}&gt;Calculate Power&lt;/button&gt;&#10;                        &lt;div className=&quot;result&quot;&gt;{powResult}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;card&quot;&gt;&#10;                        &lt;h2&gt;Factorial&lt;/h2&gt;&#10;                        &lt;input type=&quot;number&quot; placeholder=&quot;Number&quot; value={factNumber} onChange={e =&gt; setFactNumber(e.target.value)} /&gt;&#10;                        &lt;button onClick={calculateFact}&gt;Calculate Factorial&lt;/button&gt;&#10;                        &lt;div className=&quot;result&quot;&gt;{factResult}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;card&quot;&gt;&#10;                        &lt;h2&gt;Fibonacci&lt;/h2&gt;&#10;                        &lt;input type=&quot;number&quot; placeholder=&quot;Number&quot; value={fibNumber} onChange={e =&gt; setFibNumber(e.target.value)} /&gt;&#10;                        &lt;button onClick={calculateFib}&gt;Calculate Fibonacci&lt;/button&gt;&#10;                        &lt;div className=&quot;result&quot;&gt;{fibResult}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        }&#10;&#10;        function AuthPage({ onLogin }) {&#10;            const [tab, setTab] = React.useState(&quot;login&quot;);&#10;            // Login state&#10;            const [username, setUsername] = React.useState(&quot;&quot;);&#10;            const [password, setPassword] = React.useState(&quot;&quot;);&#10;            const [error, setError] = React.useState(&quot;&quot;);&#10;            // Register state&#10;            const [regUsername, setRegUsername] = React.useState(&quot;&quot;);&#10;            const [regPassword, setRegPassword] = React.useState(&quot;&quot;);&#10;            const [regError, setRegError] = React.useState(&quot;&quot;);&#10;            const [regSuccess, setRegSuccess] = React.useState(&quot;&quot;);&#10;&#10;            const handleLogin = async (e) =&gt; {&#10;                e.preventDefault();&#10;                setError(&quot;&quot;);&#10;                try {&#10;                    const res = await fetch(`${apiUrl}/login`, {&#10;                        method: &quot;POST&quot;,&#10;                        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;                        body: JSON.stringify({ username, password })&#10;                    });&#10;                    if (!res.ok) throw new Error(&quot;Invalid credentials&quot;);&#10;                    const data = await res.json();&#10;                    if (data.token) {&#10;                        onLogin(data.token);&#10;                    } else {&#10;                        setError(&quot;Login failed&quot;);&#10;                    }&#10;                } catch (err) {&#10;                    setError(err.message);&#10;                }&#10;            };&#10;&#10;            const handleRegister = async (e) =&gt; {&#10;                e.preventDefault();&#10;                setRegError(&quot;&quot;);&#10;                setRegSuccess(&quot;&quot;);&#10;                try {&#10;                    const res = await fetch(`${apiUrl}/register`, {&#10;                        method: &quot;POST&quot;,&#10;                        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;                        body: JSON.stringify({ username: regUsername, password: regPassword })&#10;                    });&#10;                    const data = await res.json();&#10;                    if (!res.ok) throw new Error(data.detail || &quot;Registration failed&quot;);&#10;                    setRegSuccess(&quot;Account created! You can now sign in.&quot;);&#10;                } catch (err) {&#10;                    setRegError(err.message);&#10;                }&#10;            };&#10;&#10;            return (&#10;                &lt;div className=&quot;container&quot;&gt;&#10;                    &lt;div className=&quot;card&quot;&gt;&#10;                        &lt;div className=&quot;tab-btns&quot;&gt;&#10;                            &lt;button className={tab === &quot;login&quot; ? &quot;active&quot; : &quot;&quot;} onClick={() =&gt; setTab(&quot;login&quot;)}&gt;Sign In&lt;/button&gt;&#10;                            &lt;button className={tab === &quot;register&quot; ? &quot;active&quot; : &quot;&quot;} onClick={() =&gt; setTab(&quot;register&quot;)}&gt;Create Account&lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                        {tab === &quot;login&quot; ? (&#10;                            &lt;form onSubmit={handleLogin} style={{width: '100%'}}&gt;&#10;                                &lt;input type=&quot;text&quot; placeholder=&quot;Username&quot; value={username} onChange={e =&gt; setUsername(e.target.value)} required /&gt;&#10;                                &lt;input type=&quot;password&quot; placeholder=&quot;Password&quot; value={password} onChange={e =&gt; setPassword(e.target.value)} required /&gt;&#10;                                &lt;button type=&quot;submit&quot;&gt;Sign In&lt;/button&gt;&#10;                                {error &amp;&amp; &lt;div className=&quot;error&quot;&gt;{error}&lt;/div&gt;}&#10;                            &lt;/form&gt;&#10;                        ) : (&#10;                            &lt;form onSubmit={handleRegister} style={{width: '100%'}}&gt;&#10;                                &lt;input type=&quot;text&quot; placeholder=&quot;Username&quot; value={regUsername} onChange={e =&gt; setRegUsername(e.target.value)} required /&gt;&#10;                                &lt;input type=&quot;password&quot; placeholder=&quot;Password&quot; value={regPassword} onChange={e =&gt; setRegPassword(e.target.value)} required /&gt;&#10;                                &lt;button type=&quot;submit&quot;&gt;Create Account&lt;/button&gt;&#10;                                {regError &amp;&amp; &lt;div className=&quot;error&quot;&gt;{regError}&lt;/div&gt;}&#10;                                {regSuccess &amp;&amp; &lt;div className=&quot;success&quot;&gt;{regSuccess}&lt;/div&gt;}&#10;                            &lt;/form&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        }&#10;&#10;        function App() {&#10;            const [token, setToken] = React.useState(null);&#10;            if (!token) {&#10;                return &lt;AuthPage onLogin={setToken} /&gt;;&#10;            }&#10;            return &lt;MathApp token={token} /&gt;;&#10;        }&#10;&#10;        ReactDOM.createRoot(document.getElementById(&quot;root&quot;)).render(&lt;App /&gt;);&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Math API Client&lt;/title&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;!-- React and ReactDOM via CDN --&gt;&#10;    &lt;script src=&quot;https://unpkg.com/react@18/umd/react.development.js&quot; crossorigin&gt;&lt;/script&gt;&#10;    &lt;script src=&quot;https://unpkg.com/react-dom@18/umd/react-dom.development.js&quot; crossorigin&gt;&lt;/script&gt;&#10;    &lt;!-- Babel for JSX support --&gt;&#10;    &lt;script src=&quot;https://unpkg.com/@babel/standalone/babel.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;style&gt;&#10;        body {&#10;            font-family: Arial, sans-serif;&#10;            margin: 0;&#10;            min-height: 100vh;&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);&#10;        }&#10;        .container {&#10;            display: flex;&#10;            flex-direction: column;&#10;            align-items: center;&#10;            justify-content: center;&#10;            min-width: 350px;&#10;            max-width: 400px;&#10;            width: 100%;&#10;        }&#10;        .card {&#10;            background: #f9f9f9;&#10;            border-radius: 16px;&#10;            padding: 2em 2em 1.5em 2em;&#10;            margin-bottom: 2em;&#10;            box-shadow: 0 4px 24px #90caf9;&#10;            width: 100%;&#10;            display: flex;&#10;            flex-direction: column;&#10;            align-items: center;&#10;        }&#10;        input, button {&#10;            margin: 0.5em;&#10;            padding: 0.75em;&#10;            border-radius: 8px;&#10;            border: 1px solid #90caf9;&#10;            font-size: 1em;&#10;            width: 90%;&#10;            box-sizing: border-box;&#10;        }&#10;        button {&#10;            background: #1976d2;&#10;            color: white;&#10;            border: none;&#10;            cursor: pointer;&#10;            font-weight: bold;&#10;            transition: background 0.2s;&#10;        }&#10;        button:hover {&#10;            background: #1565c0;&#10;        }&#10;        .result {&#10;            margin-top: 0.5em;&#10;            font-weight: bold;&#10;            color: #1976d2;&#10;            font-size: 1.1em;&#10;        }&#10;        h1, h2 {&#10;            text-align: center;&#10;            color: #1976d2;&#10;        }&#10;        .tab-btns {&#10;            display: flex;&#10;            width: 100%;&#10;            margin-bottom: 1em;&#10;        }&#10;        .tab-btns button {&#10;            flex: 1;&#10;            border-radius: 8px 8px 0 0;&#10;            margin: 0;&#10;            border-bottom: 2px solid #1976d2;&#10;        }&#10;        .tab-btns button:not(:last-child) {&#10;            border-right: 1px solid #90caf9;&#10;        }&#10;        .tab-btns button.active {&#10;            background: #1976d2;&#10;            color: white;&#10;        }&#10;        .error {&#10;            color: #d32f2f;&#10;            margin-top: 0.5em;&#10;        }&#10;        .success {&#10;            color: #388e3c;&#10;            margin-top: 0.5em;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;&#10;    &lt;script type=&quot;text/babel&quot;&gt;&#10;        const apiUrl = &quot;http://127.0.0.1:8080&quot;;&#10;&#10;        function SignIn({ onLogin }) {&#10;            const [username, setUsername] = React.useState(&quot;&quot;);&#10;            const [password, setPassword] = React.useState(&quot;&quot;);&#10;            const [error, setError] = React.useState(&quot;&quot;);&#10;&#10;            const handleSubmit = async (e) =&gt; {&#10;                e.preventDefault();&#10;                setError(&quot;&quot;);&#10;                try {&#10;                    const res = await fetch(`${apiUrl}/login`, {&#10;                        method: &quot;POST&quot;,&#10;                        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;                        body: JSON.stringify({ username, password })&#10;                    });&#10;                    if (!res.ok) throw new Error(&quot;Invalid credentials&quot;);&#10;                    const data = await res.json();&#10;                    if (data.token) {&#10;                        onLogin(data.token);&#10;                    } else {&#10;                        setError(&quot;Login failed&quot;);&#10;                    }&#10;                } catch (err) {&#10;                    setError(err.message);&#10;                }&#10;            };&#10;&#10;            return (&#10;                &lt;div className=&quot;card&quot;&gt;&#10;                    &lt;h2&gt;Sign In&lt;/h2&gt;&#10;                    &lt;form onSubmit={handleSubmit}&gt;&#10;                        &lt;input type=&quot;text&quot; placeholder=&quot;Username&quot; value={username} onChange={e =&gt; setUsername(e.target.value)} required /&gt;&#10;                        &lt;input type=&quot;password&quot; placeholder=&quot;Password&quot; value={password} onChange={e =&gt; setPassword(e.target.value)} required /&gt;&#10;                        &lt;button type=&quot;submit&quot;&gt;Sign In&lt;/button&gt;&#10;                    &lt;/form&gt;&#10;                    {error &amp;&amp; &lt;div style={{color: 'red'}}&gt;{error}&lt;/div&gt;}&#10;                &lt;/div&gt;&#10;            );&#10;        }&#10;&#10;        function MathApp({ token, onLogout }) {&#10;            const [powBase, setPowBase] = React.useState(&quot;&quot;);&#10;            const [powExponent, setPowExponent] = React.useState(&quot;&quot;);&#10;            const [powResult, setPowResult] = React.useState(&quot;&quot;);&#10;            const [factNumber, setFactNumber] = React.useState(&quot;&quot;);&#10;            const [factResult, setFactResult] = React.useState(&quot;&quot;);&#10;            const [fibNumber, setFibNumber] = React.useState(&quot;&quot;);&#10;            const [fibResult, setFibResult] = React.useState(&quot;&quot;);&#10;&#10;            const calculatePow = async () =&gt; {&#10;                setPowResult(&quot;Calculating...&quot;);&#10;                const res = await fetch(`${apiUrl}/pow`, {&#10;                    method: &quot;POST&quot;,&#10;                    headers: { &quot;Content-Type&quot;: &quot;application/json&quot;, ...(token ? { Authorization: `Bearer ${token}` } : {}) },&#10;                    body: JSON.stringify({ base: Number(powBase), exponent: Number(powExponent) })&#10;                });&#10;                const data = await res.json();&#10;                setPowResult(data.result);&#10;            };&#10;&#10;            const calculateFact = async () =&gt; {&#10;                setFactResult(&quot;Calculating...&quot;);&#10;                const res = await fetch(`${apiUrl}/factorial`, {&#10;                    method: &quot;POST&quot;,&#10;                    headers: { &quot;Content-Type&quot;: &quot;application/json&quot;, ...(token ? { Authorization: `Bearer ${token}` } : {}) },&#10;                    body: JSON.stringify({ number: Number(factNumber) })&#10;                });&#10;                const data = await res.json();&#10;                setFactResult(data.result);&#10;            };&#10;&#10;            const calculateFib = async () =&gt; {&#10;                setFibResult(&quot;Calculating...&quot;);&#10;                const res = await fetch(`${apiUrl}/fib`, {&#10;                    method: &quot;POST&quot;,&#10;                    headers: { &quot;Content-Type&quot;: &quot;application/json&quot;, ...(token ? { Authorization: `Bearer ${token}` } : {}) },&#10;                    body: JSON.stringify({ number: Number(fibNumber) })&#10;                });&#10;                const data = await res.json();&#10;                setFibResult(data.result);&#10;            };&#10;&#10;            return (&#10;                &lt;div className=&quot;container&quot;&gt;&#10;                    &lt;button style={{alignSelf: 'flex-end', marginBottom: '1em', background: '#d32f2f'}} onClick={onLogout}&gt;Log Out&lt;/button&gt;&#10;                    &lt;h1&gt;Math Operations&lt;/h1&gt;&#10;                    &lt;div className=&quot;card&quot;&gt;&#10;                        &lt;h2&gt;Power&lt;/h2&gt;&#10;                        &lt;input type=&quot;number&quot; placeholder=&quot;Base&quot; value={powBase} onChange={e =&gt; setPowBase(e.target.value)} /&gt;&#10;                        &lt;input type=&quot;number&quot; placeholder=&quot;Exponent&quot; value={powExponent} onChange={e =&gt; setPowExponent(e.target.value)} /&gt;&#10;                        &lt;button onClick={calculatePow}&gt;Calculate Power&lt;/button&gt;&#10;                        &lt;div className=&quot;result&quot;&gt;{powResult}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;card&quot;&gt;&#10;                        &lt;h2&gt;Factorial&lt;/h2&gt;&#10;                        &lt;input type=&quot;number&quot; placeholder=&quot;Number&quot; value={factNumber} onChange={e =&gt; setFactNumber(e.target.value)} /&gt;&#10;                        &lt;button onClick={calculateFact}&gt;Calculate Factorial&lt;/button&gt;&#10;                        &lt;div className=&quot;result&quot;&gt;{factResult}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;card&quot;&gt;&#10;                        &lt;h2&gt;Fibonacci&lt;/h2&gt;&#10;                        &lt;input type=&quot;number&quot; placeholder=&quot;Number&quot; value={fibNumber} onChange={e =&gt; setFibNumber(e.target.value)} /&gt;&#10;                        &lt;button onClick={calculateFib}&gt;Calculate Fibonacci&lt;/button&gt;&#10;                        &lt;div className=&quot;result&quot;&gt;{fibResult}&lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        }&#10;&#10;        function AuthPage({ onLogin }) {&#10;            const [tab, setTab] = React.useState(&quot;login&quot;);&#10;            // Login state&#10;            const [username, setUsername] = React.useState(&quot;&quot;);&#10;            const [password, setPassword] = React.useState(&quot;&quot;);&#10;            const [error, setError] = React.useState(&quot;&quot;);&#10;            // Register state&#10;            const [regUsername, setRegUsername] = React.useState(&quot;&quot;);&#10;            const [regPassword, setRegPassword] = React.useState(&quot;&quot;);&#10;            const [regError, setRegError] = React.useState(&quot;&quot;);&#10;            const [regSuccess, setRegSuccess] = React.useState(&quot;&quot;);&#10;&#10;            const handleLogin = async (e) =&gt; {&#10;                e.preventDefault();&#10;                setError(&quot;&quot;);&#10;                try {&#10;                    const res = await fetch(`${apiUrl}/login`, {&#10;                        method: &quot;POST&quot;,&#10;                        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;                        body: JSON.stringify({ username, password })&#10;                    });&#10;                    if (!res.ok) throw new Error(&quot;Invalid credentials&quot;);&#10;                    const data = await res.json();&#10;                    if (data.token) {&#10;                        onLogin(data.token);&#10;                    } else {&#10;                        setError(&quot;Login failed&quot;);&#10;                    }&#10;                } catch (err) {&#10;                    setError(err.message);&#10;                }&#10;            };&#10;&#10;            const handleRegister = async (e) =&gt; {&#10;                e.preventDefault();&#10;                setRegError(&quot;&quot;);&#10;                setRegSuccess(&quot;&quot;);&#10;                try {&#10;                    const res = await fetch(`${apiUrl}/register`, {&#10;                        method: &quot;POST&quot;,&#10;                        headers: { &quot;Content-Type&quot;: &quot;application/json&quot; },&#10;                        body: JSON.stringify({ username: regUsername, password: regPassword })&#10;                    });&#10;                    const data = await res.json();&#10;                    if (!res.ok) throw new Error(data.detail || &quot;Registration failed&quot;);&#10;                    setRegSuccess(&quot;Account created! You can now sign in.&quot;);&#10;                } catch (err) {&#10;                    setRegError(err.message);&#10;                }&#10;            };&#10;&#10;            return (&#10;                &lt;div className=&quot;container&quot;&gt;&#10;                    &lt;div className=&quot;card&quot;&gt;&#10;                        &lt;div className=&quot;tab-btns&quot;&gt;&#10;                            &lt;button className={tab === &quot;login&quot; ? &quot;active&quot; : &quot;&quot;} onClick={() =&gt; setTab(&quot;login&quot;)}&gt;Sign In&lt;/button&gt;&#10;                            &lt;button className={tab === &quot;register&quot; ? &quot;active&quot; : &quot;&quot;} onClick={() =&gt; setTab(&quot;register&quot;)}&gt;Create Account&lt;/button&gt;&#10;                        &lt;/div&gt;&#10;                        {tab === &quot;login&quot; ? (&#10;                            &lt;form onSubmit={handleLogin} style={{width: '100%'}}&gt;&#10;                                &lt;input type=&quot;text&quot; placeholder=&quot;Username&quot; value={username} onChange={e =&gt; setUsername(e.target.value)} required /&gt;&#10;                                &lt;input type=&quot;password&quot; placeholder=&quot;Password&quot; value={password} onChange={e =&gt; setPassword(e.target.value)} required /&gt;&#10;                                &lt;button type=&quot;submit&quot;&gt;Sign In&lt;/button&gt;&#10;                                {error &amp;&amp; &lt;div className=&quot;error&quot;&gt;{error}&lt;/div&gt;}&#10;                            &lt;/form&gt;&#10;                        ) : (&#10;                            &lt;form onSubmit={handleRegister} style={{width: '100%'}}&gt;&#10;                                &lt;input type=&quot;text&quot; placeholder=&quot;Username&quot; value={regUsername} onChange={e =&gt; setRegUsername(e.target.value)} required /&gt;&#10;                                &lt;input type=&quot;password&quot; placeholder=&quot;Password&quot; value={regPassword} onChange={e =&gt; setRegPassword(e.target.value)} required /&gt;&#10;                                &lt;button type=&quot;submit&quot;&gt;Create Account&lt;/button&gt;&#10;                                {regError &amp;&amp; &lt;div className=&quot;error&quot;&gt;{regError}&lt;/div&gt;}&#10;                                {regSuccess &amp;&amp; &lt;div className=&quot;success&quot;&gt;{regSuccess}&lt;/div&gt;}&#10;                            &lt;/form&gt;&#10;                        )}&#10;                    &lt;/div&gt;&#10;                &lt;/div&gt;&#10;            );&#10;        }&#10;&#10;        function App() {&#10;            const [token, setToken] = React.useState(null);&#10;            const handleLogout = () =&gt; setToken(null);&#10;            if (!token) {&#10;                return &lt;AuthPage onLogin={setToken} /&gt;;&#10;            }&#10;            return &lt;MathApp token={token} onLogout={handleLogout} /&gt;;&#10;        }&#10;&#10;        ReactDOM.createRoot(document.getElementById(&quot;root&quot;)).render(&lt;App /&gt;);&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/docker-compose.yml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/docker-compose.yml" />
              <option name="originalContent" value="version: &quot;3.9&quot;&#10;&#10;services:&#10;  math-api:&#10;    build:&#10;      context: .&#10;      dockerfile: Dockerfile&#10;    container_name: math-api&#10;    ports:&#10;      - &quot;8000:8000&quot;&#10;    volumes:&#10;      - .:/app&#10;    restart: always&#10;" />
              <option name="updatedContent" value="services:&#10;  math-api:&#10;    build:&#10;      context: .&#10;      dockerfile: Dockerfile&#10;    container_name: math-api&#10;    ports:&#10;      - &quot;8000:8000&quot;&#10;    volumes:&#10;      - .:/app&#10;    restart: always" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/requirements.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/requirements.txt" />
              <option name="originalContent" value="aiofiles==23.2.1&#10;annotated-types==0.7.0&#10;anyio==4.9.0&#10;async-lru==2.0.4&#10;black==25.1.0&#10;certifi==2025.7.14&#10;click==8.1.7&#10;click-default-group==1.2.4&#10;colorama==0.4.6&#10;fastapi==0.110.2&#10;flake8==7.0.0&#10;greenlet==3.2.3&#10;h11==0.16.0&#10;httpcore==1.0.9&#10;httptools==0.6.4&#10;httpx==0.27.0&#10;idna==3.10&#10;iniconfig==2.1.0&#10;mccabe==0.7.0&#10;mypy_extensions==1.1.0&#10;packaging==25.0&#10;pathspec==0.12.1&#10;platformdirs==4.3.8&#10;pluggy==1.6.0&#10;pycodestyle==2.11.1&#10;pydantic==2.7.1&#10;pydantic_core==2.18.2&#10;pyflakes==3.2.0&#10;pytest==8.2.2&#10;python-dateutil==2.9.0.post0&#10;python-dotenv==1.0.1&#10;PyYAML==6.0.2&#10;setuptools==80.9.0&#10;six==1.17.0&#10;sniffio==1.3.1&#10;SQLAlchemy==2.0.30&#10;sqlite-fts4==1.0.3&#10;sqlite-utils==3.38&#10;starlette==0.37.2&#10;tabulate==0.9.0&#10;typing-inspection==0.4.1&#10;typing_extensions==4.14.1&#10;uvicorn==0.29.0&#10;watchfiles==1.1.0&#10;websockets==15.0.1&#10;" />
              <option name="updatedContent" value="aiofiles==23.2.1&#10;annotated-types==0.7.0&#10;anyio==4.9.0&#10;async-lru==2.0.4&#10;black==25.1.0&#10;certifi==2025.7.14&#10;click==8.1.7&#10;click-default-group==1.2.4&#10;colorama==0.4.6&#10;fastapi==0.110.2&#10;flake8==7.0.0&#10;greenlet==3.2.3&#10;h11==0.16.0&#10;httpcore==1.0.9&#10;httptools==0.6.4&#10;httpx==0.27.0&#10;idna==3.10&#10;iniconfig==2.1.0&#10;mccabe==0.7.0&#10;mypy_extensions==1.1.0&#10;packaging==25.0&#10;pathspec==0.12.1&#10;platformdirs==4.3.8&#10;pluggy==1.6.0&#10;pycodestyle==2.11.1&#10;pydantic==2.7.1&#10;pydantic_core==2.18.2&#10;pyflakes==3.2.0&#10;pytest==8.2.2&#10;python-dateutil==2.9.0.post0&#10;python-dotenv==1.0.1&#10;PyYAML==6.0.2&#10;setuptools==80.9.0&#10;six==1.17.0&#10;sniffio==1.3.1&#10;SQLAlchemy==2.0.30&#10;sqlite-fts4==1.0.3&#10;sqlite-utils==3.38&#10;starlette==0.37.2&#10;tabulate==0.9.0&#10;typing-inspection==0.4.1&#10;typing_extensions==4.14.1&#10;uvicorn==0.29.0&#10;watchfiles==1.1.0&#10;websockets==15.0.1&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/cache.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/cache.py" />
              <option name="originalContent" value="cache_store = {&quot;fib&quot;: {}}&#10;&#10;&#10;def init_cache():&#10;    global cache_store&#10;    cache_store = {&quot;fib&quot;: {}}&#10;&#10;&#10;def check_cache(operation: str, key: int):&#10;    return cache_store.get(operation, {}).get(key)&#10;&#10;&#10;def set_cache(operation: str, key: int, value):&#10;    if operation not in cache_store:&#10;        cache_store[operation] = {}&#10;    cache_store[operation][key] = value&#10;" />
              <option name="updatedContent" value="cache_store = {&quot;fib&quot;: {}, &quot;pow&quot;: {}, &quot;factorial&quot;: {}}&#10;&#10;&#10;def init_cache():&#10;    global cache_store&#10;    cache_store = {&quot;fib&quot;: {}, &quot;pow&quot;: {}, &quot;factorial&quot;: {}}&#10;&#10;&#10;def check_cache(operation: str, key: int):&#10;    return cache_store.get(operation, {}).get(key)&#10;&#10;&#10;def set_cache(operation: str, key: int, value):&#10;    if operation not in cache_store:&#10;        cache_store[operation] = {}&#10;    cache_store[operation][key] = value" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/database.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/database.py" />
              <option name="originalContent" value="from sqlalchemy import create_engine, Column, Integer, String, Text&#10;from sqlalchemy.ext.declarative import declarative_base&#10;from sqlalchemy.orm import sessionmaker&#10;import json&#10;&#10;DATABASE_URL = &quot;sqlite:///./math.db&quot;&#10;&#10;engine = create_engine(DATABASE_URL, connect_args={&quot;check_same_thread&quot;: False})&#10;SessionLocal = sessionmaker(bind=engine)&#10;Base = declarative_base()&#10;&#10;&#10;class RequestLog(Base):&#10;    __tablename__ = &quot;request_log&quot;&#10;    id = Column(Integer, primary_key=True, index=True)&#10;    operation = Column(String)&#10;    input_data = Column(Text)&#10;    result = Column(String)&#10;&#10;&#10;def init_db():&#10;    Base.metadata.create_all(bind=engine)&#10;&#10;&#10;async def save_to_db(operation: str, input_data: dict, result):&#10;    db = SessionLocal()&#10;    log = RequestLog(&#10;        operation=operation, input_data=json.dumps(input_data), result=str(result)&#10;    )&#10;    db.add(log)&#10;    db.commit()&#10;    db.close()&#10;" />
              <option name="updatedContent" value="from sqlalchemy import create_engine, Column, Integer, String, Text&#10;from sqlalchemy.ext.declarative import declarative_base&#10;from sqlalchemy.orm import sessionmaker&#10;import json&#10;from passlib.context import CryptContext&#10;&#10;DATABASE_URL = &quot;sqlite:///./math.db&quot;&#10;&#10;engine = create_engine(DATABASE_URL, connect_args={&quot;check_same_thread&quot;: False})&#10;SessionLocal = sessionmaker(bind=engine)&#10;Base = declarative_base()&#10;&#10;pwd_context = CryptContext(schemes=[&quot;bcrypt&quot;], deprecated=&quot;auto&quot;)&#10;&#10;&#10;class RequestLog(Base):&#10;    __tablename__ = &quot;request_log&quot;&#10;    id = Column(Integer, primary_key=True, index=True)&#10;    operation = Column(String)&#10;    input_data = Column(Text)&#10;    result = Column(String)&#10;&#10;&#10;class User(Base):&#10;    __tablename__ = &quot;users&quot;&#10;    id = Column(Integer, primary_key=True, index=True)&#10;    username = Column(String, unique=True, index=True, nullable=False)&#10;    password_hash = Column(String, nullable=False)&#10;&#10;&#10;def init_db():&#10;    Base.metadata.create_all(bind=engine)&#10;&#10;&#10;def save_to_db(operation: str, input_data: dict, result):&#10;    db = SessionLocal()&#10;    log = RequestLog(&#10;        operation=operation, input_data=json.dumps(input_data), result=str(result)&#10;    )&#10;    db.add(log)&#10;    db.commit()&#10;    db.close()&#10;&#10;&#10;def get_user(username: str):&#10;    db = SessionLocal()&#10;    user = db.query(User).filter(User.username == username).first()&#10;    db.close()&#10;    return user&#10;&#10;&#10;def create_user(username: str, password: str):&#10;    db = SessionLocal()&#10;    password_hash = pwd_context.hash(password)&#10;    user = User(username=username, password_hash=password_hash)&#10;    db.add(user)&#10;    db.commit()&#10;    db.close()&#10;&#10;&#10;def verify_password(plain_password, password_hash):&#10;    return pwd_context.verify(plain_password, password_hash)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/main.py" />
              <option name="originalContent" value="from fastapi import FastAPI&#10;from fastapi import Request&#10;from fastapi.middleware.cors import CORSMiddleware&#10;from app import database, schemas, logic, cache, workers&#10;from app.logging_config import setup_logging&#10;&#10;&#10;app = FastAPI()  # Creates instance of FastAPI web server -&gt; will be used by uvicorn&#10;&#10;# Add CORS middleware&#10;app.add_middleware(&#10;    CORSMiddleware,&#10;    allow_origins=[&quot;*&quot;],&#10;    allow_credentials=True,&#10;    allow_methods=[&quot;*&quot;],&#10;    allow_headers=[&quot;*&quot;],&#10;)&#10;&#10;database.init_db()  # Initializes the database connection&#10;cache.init_cache()  # Initializes the cache store&#10;&#10;&#10;@app.on_event(&quot;startup&quot;)&#10;async def startup_event():&#10;    await workers.init_worker()&#10;&#10;&#10;@app.post(&quot;/pow&quot;)&#10;async def pow_api(req: schemas.PowerRequest):&#10;    cached = cache.check_cache(&quot;pow&quot;, (req.base, req.exponent))&#10;    database.save_to_db(&quot;pow&quot;, req.model_dump(), cached if cached else logic.power(req.base, req.exponent))&#10;    if cached:&#10;        return {&quot;result&quot;: cached}&#10;    result = logic.power(req.base, req.exponent)&#10;    cache.set_cache(&quot;pow&quot;, (req.base, req.exponent), result)&#10;    return {&quot;result&quot;: result}&#10;&#10;&#10;@app.post(&quot;/factorial&quot;)&#10;async def fact_api(req: schemas.SingleInput):&#10;    cached = cache.check_cache(&quot;factorial&quot;, req.number)&#10;    database.save_to_db(&quot;factorial&quot;, req.model_dump(), cached if cached else logic.factorial(req.number))&#10;    if cached:&#10;        return {&quot;result&quot;: cached}&#10;    result = logic.factorial(req.number)&#10;    cache.set_cache(&quot;factorial&quot;, req.number, result)&#10;    return {&quot;result&quot;: result}&#10;&#10;&#10;@app.post(&quot;/fib&quot;)&#10;async def fib_api(req: schemas.SingleInput):&#10;    cached = cache.check_cache(&quot;fib&quot;, req.number)&#10;    database.save_to_db(&quot;fib&quot;, req.model_dump(), cached if cached else await workers.fib_worker(req.number))&#10;    if cached:&#10;        return {&quot;result&quot;: cached}&#10;    result = await workers.fib_worker(req.number)&#10;    cache.set_cache(&quot;fib&quot;, req.number, result)&#10;    return {&quot;result&quot;: result}&#10;&#10;&#10;setup_logging()&#10;&#10;&#10;@app.middleware(&quot;http&quot;)&#10;async def log_requests(request: Request, call_next):&#10;    print(f&quot;Incoming request: {request.method} {request.url.path}&quot;)&#10;    response = await call_next(request)&#10;    print(f&quot;Response status: {response.status_code}&quot;)&#10;    return response&#10;&#10;&#10;@app.get(&quot;/cache&quot;)&#10;def get_cache():&#10;    from app import cache&#10;&#10;    return cache.cache_store&#10;" />
              <option name="updatedContent" value="from fastapi import FastAPI&#10;from fastapi import Request&#10;from fastapi.middleware.cors import CORSMiddleware&#10;from app import database, schemas, logic, cache, workers&#10;from app.logging_config import setup_logging&#10;from fastapi import HTTPException&#10;from pydantic import BaseModel&#10;&#10;&#10;app = FastAPI()  # Creates instance of FastAPI web server -&gt; will be used by uvicorn&#10;&#10;# Add CORS middleware&#10;app.add_middleware(&#10;    CORSMiddleware,&#10;    allow_origins=[&quot;*&quot;],&#10;    allow_credentials=True,&#10;    allow_methods=[&quot;*&quot;],&#10;    allow_headers=[&quot;*&quot;],&#10;)&#10;&#10;database.init_db()  # Initializes the database connection&#10;cache.init_cache()  # Initializes the cache store&#10;&#10;&#10;@app.on_event(&quot;startup&quot;)&#10;async def startup_event():&#10;    await workers.init_worker()&#10;&#10;&#10;@app.post(&quot;/pow&quot;)&#10;async def pow_api(req: schemas.PowerRequest):&#10;    cached = cache.check_cache(&quot;pow&quot;, (req.base, req.exponent))&#10;    database.save_to_db(&quot;pow&quot;, req.model_dump(), cached if cached else logic.power(req.base, req.exponent))&#10;    if cached:&#10;        return {&quot;result&quot;: cached}&#10;    result = logic.power(req.base, req.exponent)&#10;    cache.set_cache(&quot;pow&quot;, (req.base, req.exponent), result)&#10;    return {&quot;result&quot;: result}&#10;&#10;&#10;@app.post(&quot;/factorial&quot;)&#10;async def fact_api(req: schemas.SingleInput):&#10;    cached = cache.check_cache(&quot;factorial&quot;, req.number)&#10;    database.save_to_db(&quot;factorial&quot;, req.model_dump(), cached if cached else logic.factorial(req.number))&#10;    if cached:&#10;        return {&quot;result&quot;: cached}&#10;    result = logic.factorial(req.number)&#10;    cache.set_cache(&quot;factorial&quot;, req.number, result)&#10;    return {&quot;result&quot;: result}&#10;&#10;&#10;@app.post(&quot;/fib&quot;)&#10;async def fib_api(req: schemas.SingleInput):&#10;    cached = cache.check_cache(&quot;fib&quot;, req.number)&#10;    database.save_to_db(&quot;fib&quot;, req.model_dump(), cached if cached else await workers.fib_worker(req.number))&#10;    if cached:&#10;        return {&quot;result&quot;: cached}&#10;    result = await workers.fib_worker(req.number)&#10;    cache.set_cache(&quot;fib&quot;, req.number, result)&#10;    return {&quot;result&quot;: result}&#10;&#10;&#10;class UserCreate(BaseModel):&#10;    username: str&#10;    password: str&#10;&#10;&#10;@app.post(&quot;/register&quot;)&#10;def register(user: UserCreate):&#10;    if database.get_user(user.username):&#10;        raise HTTPException(status_code=400, detail=&quot;Username already exists&quot;)&#10;    database.create_user(user.username, user.password)&#10;    return {&quot;message&quot;: &quot;User registered successfully&quot;}&#10;&#10;&#10;@app.post(&quot;/login&quot;)&#10;def login(user: UserCreate):&#10;    db_user = database.get_user(user.username)&#10;    if not db_user or not database.verify_password(user.password, db_user.password_hash):&#10;        raise HTTPException(status_code=401, detail=&quot;Invalid credentials&quot;)&#10;    # For demo, return a dummy token (implement JWT for production)&#10;    return {&quot;token&quot;: f&quot;dummy-token-for-{user.username}&quot;}&#10;&#10;&#10;setup_logging()&#10;&#10;&#10;@app.middleware(&quot;http&quot;)&#10;async def log_requests(request: Request, call_next):&#10;    print(f&quot;Incoming request: {request.method} {request.url.path}&quot;)&#10;    response = await call_next(request)&#10;    print(f&quot;Response status: {response.status_code}&quot;)&#10;    return response&#10;&#10;&#10;@app.get(&quot;/cache&quot;)&#10;def get_cache():&#10;    from app import cache&#10;&#10;    return cache.cache_store" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>